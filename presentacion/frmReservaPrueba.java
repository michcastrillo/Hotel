package presentacion;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import negocio.BOReservaDetalle;
import negocio.BOReservaPrueba;
import negocio.BOReservas;
import objetos.objConsultaReserva;
import objetos.objReservas;
import objetos.objmonto;

/**
 *
 * @author yasni
 */
public class frmReservaPrueba extends javax.swing.JFrame {
    BOReservas boreserva1 = new BOReservas();
    BOReservaPrueba boreserva = new BOReservaPrueba();
    BOReservaDetalle boreservaDetalla = new BOReservaDetalle();

    int cantidadPersonas;

    /**
     * Creates new form frmReservaPrueba
     */
    public frmReservaPrueba() {
        initComponents();
        setLocationRelativeTo(null);

    }
    //Variables 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        lblcedula = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        spcantidad = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        cmbmascotas = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        dtfechaIngreso = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        dtfechaSalida = new com.toedter.calendar.JDateChooser();
        txtReserva = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbTablaDatos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDatosDetalle = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setForeground(new java.awt.Color(102, 153, 255));

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("CEDULA:");

        lblcedula.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("CANTIDAD DE PERSONAS:");

        spcantidad.setModel(new javax.swing.SpinnerNumberModel(0, 0, 12, 1));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("MASCOTAS:");

        cmbmascotas.setText("SI");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("FECHA DE INGRESO:");

        dtfechaIngreso.setDateFormatString("dd/MM/yyyy");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("FECHA DE SALIDA:");

        dtfechaSalida.setDateFormatString("dd/MM/yyyy");

        txtReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReservaActionPerformed(evt);
            }
        });

        jButton2.setText("RESERVA HABITACION");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("CONSULTAR HABITACIONES");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        tbTablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Planta", "Tipo", "Mascota"
            }
        ));
        jScrollPane1.setViewportView(tbTablaDatos);

        jButton1.setText("Atr√°s");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        taDatosDetalle.setColumns(20);
        taDatosDetalle.setRows(5);
        jScrollPane2.setViewportView(taDatosDetalle);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel6.setText("RESERVAS DE HABITACIONES");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setText(" HABITACIONES");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setText(" DETALLE HABITACIONES");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setText("ID HABITACION");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(56, 56, 56)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cmbmascotas, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dtfechaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dtfechaSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblcedula, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(spcantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(33, 33, 33)
                                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(125, 125, 125))))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblcedula, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spcantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbmascotas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dtfechaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtfechaSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReservaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReservaActionPerformed
    private int montodef(){
        int montod = 0;
        for (int i =0;i<objmonto.listamonto.size();i++) {
            montod=objmonto.listamonto.get(i).getMonto();
        }
        return montod;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int cant = (Integer) spcantidad.getValue();
        String cantPersona = Integer.toString(cant);
        String fecha1 = ConvertirFechaString(dtfechaIngreso.getDate());
        String fecha2 = ConvertirFechaString(dtfechaSalida.getDate());
        String txtin = txtReserva.getText();
        String cedula = lblcedula.getText();
        String freserva = fechaHora();
        int monto = montodef();
        boolean veri = false;
        if (cmbmascotas.isSelected()) {
            veri = true;
            frmMascotas mas = new frmMascotas();
            mas.pack();
            mas.lbldueno.setText(lblcedula.getText());
            mas.setVisible(true);            
        }else{
            reservap1(cedula,0,cantPersona,monto,fecha1,fecha2,freserva,txtin,veri);
        }if (cmbmascotas.isSelected()) {
            int usuariomas = boreserva1.cargarCodigoUsuarioMas(cedula);//
            reservap1(cedula,usuariomas,cantPersona,monto,fecha1,fecha2,freserva,txtin,veri);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    private void reservap1(String cedula,int usuariomas,String cantPersona,int monto,String fecha1,String fecha2,String freserva,String txtin,boolean veri){
        String[] ccomas = txtin.split(",");
        int suma = 0;
        int size = ccomas.length;
        if(veri==true){
            for (int i = 0; i < size; i++) {
                if(suma==0){                  
                    boreserva1.InsertarUsuario_hab(cedula, ccomas[suma]);
                    int usuario_hab = boreserva1.cargarCodigoUsuarioHab(ccomas[suma]);
                    objReservas reserva = ingresardatoscm(cedula,usuario_hab,usuariomas,cantPersona,monto,fecha1,fecha2,freserva);
                    boreserva1.InsertarReservacm(reserva);
                    boreserva1.ModificarEstado(ccomas[suma]);
                }else if(suma>=1){
                   boreserva1.InsertarUsuario_hab(cedula, ccomas[suma]);
                   int usuario_hab = boreserva1.cargarCodigoUsuarioHab(ccomas[suma]);
                   objReservas reserva2 = ingresardatossm(cedula,usuario_hab,cantPersona,monto,fecha1,fecha2,freserva);
                   boreserva1.InsertarReservasm(reserva2);
                   boreserva1.ModificarEstado(ccomas[suma]);
                }               
                suma = suma + 1;
            }
        }else{
            for (int i = 0; i < size; i++) {
                boreserva1.InsertarUsuario_hab(cedula, ccomas[suma]);
                int usuario_hab = boreserva1.cargarCodigoUsuarioHab(ccomas[suma]);
                objReservas reserva = ingresardatossm(cedula,usuario_hab,cantPersona,monto,fecha1,fecha2,freserva);
                boreserva1.InsertarReservasm(reserva);
                boreserva1.ModificarEstado(ccomas[suma]);
                suma = suma + 1;
            }
        }
        
        limpiar();
    }
    public void limpiar() {
        dtfechaIngreso.setCalendar(null);
        dtfechaSalida.setCalendar(null);
        cmbmascotas.setSelected(false);
        txtReserva.setText("");
        spcantidad.setValue(0);
        DefaultTableModel model = (DefaultTableModel) tbTablaDatos.getModel();
        model.setRowCount(0);
    }
    public objReservas ingresardatoscm(String cedula,int usuario_hab,int usuariomas,String cantPersona,int monto,String fecha1,String fecha2,String freserva) {
        objReservas reserva = new objReservas(cedula, usuario_hab, usuariomas, cantPersona, monto, fecha1,fecha2, freserva);
        return reserva;
    }
    public objReservas ingresardatossm(String cedula,int usuario_hab,String cantPersona,int monto,String fecha1,String fecha2,String freserva) {
        objReservas reserva = new objReservas(cedula, usuario_hab, cantPersona, monto, fecha1,fecha2, freserva);
        return reserva;
    }
    public String fechaHora() {
        Calendar c1 = GregorianCalendar.getInstance();
        SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyy");
        String Ctoday = f.format(c1.getTime());
        return Ctoday;
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int cantPersona = (Integer) spcantidad.getValue();
        int estadoM = resultadoM();
        String fecha1 = ConvertirFechaString(dtfechaIngreso.getDate());
        String fecha2 = ConvertirFechaString(dtfechaSalida.getDate());

        MostrarDatosHabit(cantPersona, estadoM, fecha1, fecha2);
        // mostrarDatosJTable02();


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmReservaPrueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmReservaPrueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmReservaPrueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmReservaPrueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmReservaPrueba().setVisible(true);
            }
        });
    }

    //Metodo para saber si los usuarios quieren mascota
    public int resultadoM() {
        int resultado = 0;
        if (cmbmascotas.isSelected()) {
            resultado = 1;
        }
        return resultado;
    }

    private String ConvertirFechaString(Date fechaConver) {
        Date fecha = fechaConver;
        DateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        String fechaConvertida = formato.format(fecha);
        return fechaConvertida;
    }

    public void MostrarDatosHabit(int cantiPersona, int resulMascota, String fecha1, String fecha2) {
        objConsultaReserva.listaConsultaR.clear();
        BOReservaPrueba Cargar = new BOReservaPrueba();
        objConsultaReserva.listaConsultaR = new ArrayList<>();
         if (cantiPersona <= 4 && resulMascota == 1) { //Si la cantidad de personas son menores a 4 y acepta mascota.
            ArrayList<objConsultaReserva> listaDatos = Cargar.JuniorMascota1(fecha1, fecha2);//Devuelve 1 hab junior
            int tama = listaDatos.size(); //Si viene una habitacion con mascota
            if (tama == 1) {
                modelo(listaDatos);
                boreservaDetalla.detalle1HabitMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
            } else if (tama == 0) {//Se le ofrece una estadar con mascota
                listaDatos = Cargar.EstadarMascota1(fecha1, fecha2); //Devuelve 1 hab estandar
                if (listaDatos.size() == 1) {
                    modelo(listaDatos);
                    boreservaDetalla.detalle1HabitMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (tama == 0) {//Se le ofrece una superior con mascota
                listaDatos = Cargar.superiorMascota(fecha1, fecha2);
                if (listaDatos.size() == 1) {
                    modelo(listaDatos);
                    boreservaDetalla.detalle1HabitMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles con acceso a mascotas.");
            }
            listaDatos.clear();
        } else if (cantiPersona <= 4) { //Si la cantidad de personas son menores a 4 y no acepta mascota.
            ArrayList<objConsultaReserva> listaDatos = boreserva.JuniorSinMascota1(fecha1, fecha2); //Devuelve 1 hab estandar sin mascorta
            if (listaDatos.size() == 1) {
                modelo(listaDatos);
                boreservaDetalla.detalle1HabitSinMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
            } else if (listaDatos.isEmpty()) {
                listaDatos = boreserva.EstadarSinMascota1(fecha1, fecha2);
                if (listaDatos.size() == 1) {
                    modelo(listaDatos);
                    boreservaDetalla.detalle1HabitSinMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty()) {
                listaDatos = boreserva.superiorSinMascota1(fecha1, fecha2);
                if (listaDatos.size() == 1) {
                    modelo(listaDatos);
                    boreservaDetalla.detalle1HabitSinMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles sin acceso a mascotas.");
            }
            listaDatos.clear();
        } else if (cantiPersona == 5 && resulMascota == 1) { //Si la cantidad de personas es 5 y acepta mascota.
            ArrayList<objConsultaReserva> listaDatos = boreserva.EstadarMascota1(fecha1, fecha2); //1 hab estandar CM
            if (listaDatos.size() == 1) {
                modelo(listaDatos);
                boreservaDetalla.detalle1HabitMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
            } else if (listaDatos.isEmpty()) {
                listaDatos = boreserva.superiorMascota(fecha1, fecha2);//1 hab superior CM
                if (listaDatos.size() == 1) {
                    modelo(listaDatos);
                    boreservaDetalla.detalle1HabitMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty()) {
                listaDatos = boreserva.JuniorMascota2(fecha1, fecha2); //2 hab junior CM
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles con acceso a mascotas.");
            }
            listaDatos.clear();
        } else if (cantiPersona == 5 && resulMascota == 0) { //Si la cantidad de personas es 5 y no acepta mascota.
            ArrayList<objConsultaReserva> listaDatos = boreserva.EstadarSinMascota1(fecha1, fecha2); //1 hab estandar SM
            if (listaDatos.size() == 1) {
                modelo(listaDatos);
                boreservaDetalla.detalle1HabitSinMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
            } else if (listaDatos.isEmpty()) {
                listaDatos = boreserva.superiorSinMascota1(fecha1, fecha2);//1 hab superior SM
                if (listaDatos.size() == 1) {
                    modelo(listaDatos);
                    boreservaDetalla.detalle1HabitSinMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.size() == 1) {
                listaDatos = boreserva.JuniorSinMascota2(fecha1, fecha2); //2 hab junior SM
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles sin acceso a mascotas.");
            }
            listaDatos.clear();
        }
        if ((cantiPersona == 6 || cantiPersona == 7) && resulMascota == 1) { //Si la cantidad de personas es 6 o 7 y acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos1 = new ArrayList<>();
            ArrayList<objConsultaReserva> listaDatos = boreserva.superiorMascota(fecha1, fecha2);
            if (listaDatos.size() == 1) {
                modelo(listaDatos);
                boreservaDetalla.detalle1HabitMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
            } else if (listaDatos.isEmpty()) {
                listaDatos = boreserva.JuniorMascota2(fecha1, fecha2);
                if (listaDatos.size() == 2) { //1 op, ofrecer 2 hab Junior
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty()) {
                listaDatos = boreserva.EstanJuniMascota(fecha1, fecha2);
                if (listaDatos.size() == 2) { //1 op, ofrecer 2 hab Junior
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles con acceso a mascotas.");
            }
        }
        if ((cantiPersona == 6 || cantiPersona == 7) && resulMascota == 0) { //Si la cantidad de personas es 6 o 7 y no acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos1 = new ArrayList<>();
            ArrayList<objConsultaReserva> listaDatos = boreserva.superiorSinMascota1(fecha1, fecha2);
            if (listaDatos.size() == 1) {
                modelo(listaDatos);
                boreservaDetalla.detalle1HabitSinMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
            } else if (listaDatos.size() == 0) {
                listaDatos = boreserva.JuniorSinMascota2(fecha1, fecha2);
                if (listaDatos.size() == 2) { //1 op, ofrecer 2 hab Junior
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.size() == 0) {
                listaDatos = boreserva.EstanJuniSinMascota(fecha1, fecha2);
                if (listaDatos.size() == 2) { //1 op, ofrecer 2 hab Junior
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles sin acceso a mascotas.");
            }
        }
        if (cantiPersona == 8 && resulMascota == 1) { //Si la cantidad de personas es 8 y acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos = boreserva.superiorMascota(fecha1, fecha2);
            if (listaDatos.size() == 1) { //1 op, ofrecer 1 hab Superior
                modelo(listaDatos);
                boreservaDetalla.detalle1HabitMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
            } else if (listaDatos.size() == 0) {
                listaDatos = boreserva.JuniorMascota2(fecha1, fecha2); //2 op, 2 junior
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.size() == 0) {
                listaDatos = boreserva.EstanJuniMascota(fecha1, fecha2); //3 op, ofrecer 1 hab Junior y una estandar
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles sin acceso a mascotas.");
            }
        }
        if (cantiPersona == 8 && resulMascota == 0) { //Si la cantidad de personas es 8 y acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos = boreserva.superiorSinMascota1(fecha1, fecha2);
            if (listaDatos.size() == 1) { //1 op, ofrecer 1 hab Superior
                modelo(listaDatos);
                boreservaDetalla.detalle1HabitSinMasco(listaDatos, taDatosDetalle, fecha1, fecha2);
            } else if (listaDatos.size() == 0) {
                listaDatos = boreserva.JuniorSinMascota2(fecha1, fecha2); //2 op, 2 junior
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.size() == 0) {
                listaDatos = boreserva.EstanJuniSinMascota(fecha1, fecha2); //3 op, ofrecer 1 hab Junior y una estandar
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles sin acceso a mascotas.");
            }

        }
        if (cantiPersona == 9 && resulMascota == 1) { //Si la cantidad de personas es 9 y acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos = boreserva.EstanJuniMascota(fecha1, fecha2);
            if (listaDatos.size() == 2) { //1 op, ofrecer 1 hab Estandar y 1 Junior
                modelo(listaDatos);
                String habit1 = listaDatos.get(0).getNombre();
                String habit2 = listaDatos.get(1).getNombre();
                boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.SuperJuniMascota(fecha1, fecha2); //2 op, 2 Estandar mascota
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.EstadarMascota2(fecha1, fecha2); //3 op, ofrecer 1 hab junior y 1 superior
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.JuniorMascota3(fecha1, fecha2); //4 op, 3 habitaciones Junior
                if (listaDatos.size() == 3) {
                    modelo(listaDatos);
                    String pla1 = listaDatos.get(0).getPlanta();
                    String pla2 = listaDatos.get(1).getPlanta();
                    String pla3 = listaDatos.get(2).getPlanta();
                    boreservaDetalla.detalle3HabitMas(listaDatos, taDatosDetalle, pla1, pla2, pla3, fecha1, fecha2);

                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles con acceso a mascotas.");
            }
        }
        if (cantiPersona == 9 && resulMascota == 0) { //Si la cantidad de personas es 9 y no acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos = boreserva.EstanJuniSinMascota(fecha1, fecha2);
            if (listaDatos.size() == 2) { //1 op, ofrecer 1 hab Estandar y 1 Junior
                modelo(listaDatos);
                String habit1 = listaDatos.get(0).getNombre();
                String habit2 = listaDatos.get(1).getNombre();
                boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.SuperJuniSinMascota(fecha1, fecha2); //2 op, 2 Estandar mascota
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.EstadarSinMascota2(fecha1, fecha2); //3 op, ofrecer 1 hab junior y 1 superior
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.JuniorSinMascota3(fecha1, fecha2); //4 op, 3 habitaciones Junior
                if (listaDatos.size() == 3) {
                    modelo(listaDatos);
                    String pla1 = listaDatos.get(0).getPlanta();
                    String pla2 = listaDatos.get(1).getPlanta();
                    String pla3 = listaDatos.get(2).getPlanta();
                    boreservaDetalla.detalle3HabiSintMas(listaDatos, taDatosDetalle, pla1, pla2, pla3, fecha1, fecha2);

                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles sin acceso a mascotas.");
            }
        }
        if (cantiPersona == 10 && resulMascota == 1) { //Si la cantidad de personas es 9 y acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos = boreserva.EstadarMascota2(fecha1, fecha2);
            if (listaDatos.size() == 2) { //1 op, ofrecer 1 hab Estandar y 1 Junior
                modelo(listaDatos);
                String habit1 = listaDatos.get(0).getNombre();
                String habit2 = listaDatos.get(1).getNombre();
                boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.SuperJuniMascota(fecha1, fecha2); //2 op, 2 Estandar mascota
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.JuniorMascota3(fecha1, fecha2); //4 op, 3 habitaciones Junior
                if (listaDatos.size() == 3) {
                    modelo(listaDatos);
                    String pla1 = listaDatos.get(0).getPlanta();
                    String pla2 = listaDatos.get(1).getPlanta();
                    String pla3 = listaDatos.get(2).getPlanta();
                    boreservaDetalla.detalle3HabitMas(listaDatos, taDatosDetalle, pla1, pla2, pla3, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.EstanSuperMascota(fecha1, fecha2); //2 op, 2 Estandar mascota
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles con acceso a mascotas.");
            }
        }
        if (cantiPersona == 10 && resulMascota == 0) { //Si la cantidad de personas es 10 y no acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos = boreserva.EstadarSinMascota2(fecha1, fecha2);
            if (listaDatos.size() == 2) { //1 op, ofrecer 1 hab Estandar y 1 Junior
                modelo(listaDatos);
                String habit1 = listaDatos.get(0).getNombre();
                String habit2 = listaDatos.get(1).getNombre();
                boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.SuperJuniSinMascota(fecha1, fecha2); //2 op, 2 Estandar mascota
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.JuniorSinMascota3(fecha1, fecha2); //4 op, 3 habitaciones Junior
                if (listaDatos.size() == 3) {
                    modelo(listaDatos);
                    String pla1 = listaDatos.get(0).getPlanta();
                    String pla2 = listaDatos.get(1).getPlanta();
                    String pla3 = listaDatos.get(2).getPlanta();
                    boreservaDetalla.detalle3HabiSintMas(listaDatos, taDatosDetalle, pla1, pla2, pla3, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.EstanSuperSinMascota(fecha1, fecha2); //2 op, 2 Estandar mascota
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles sin acceso a mascotas.");
            }
        }
        if ((cantiPersona == 11 || cantiPersona == 12) && resulMascota == 1) { //Si la cantidad de personas es 11 0 12 y acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos = boreserva.SuperJuniMascota(fecha1, fecha2);
            if (listaDatos.size() == 2) { //1 op, ofrecer 1 hab Superior y 1 Junior
                modelo(listaDatos);
                String habit1 = listaDatos.get(0).getNombre();
                String habit2 = listaDatos.get(1).getNombre();
                boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.JuniorMascota3(fecha1, fecha2); //2 op, 3 Junior mascota
                if (listaDatos.size() == 3) {
                    modelo(listaDatos);
                    String pla1 = listaDatos.get(0).getPlanta();
                    String pla2 = listaDatos.get(1).getPlanta();
                    String pla3 = listaDatos.get(2).getPlanta();
                    boreservaDetalla.detalle3HabitMas(listaDatos, taDatosDetalle, pla1, pla2, pla3, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.EstanSuperMascota(fecha1, fecha2); //3 op, ofrecer 1 hab Estandar y 1 superior
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.Estan2Juni1SinMascota(fecha1, fecha2); //2 op, 3 Junior mascota
                if (listaDatos.size() == 3) {
                    modelo(listaDatos);
                    String pla1 = listaDatos.get(0).getPlanta();
                    String pla2 = listaDatos.get(1).getPlanta();
                    String pla3 = listaDatos.get(2).getPlanta();
                    boreservaDetalla.detalle3HabitMas(listaDatos, taDatosDetalle, pla1, pla2, pla3, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles con acceso a mascotas.");
            }
        }
        if ((cantiPersona == 11 || cantiPersona == 12) && resulMascota == 0) { //Si la cantidad de personas es 10 y no acepta mascota.            
            ArrayList<objConsultaReserva> listaDatos = boreserva.SuperJuniSinMascota(fecha1, fecha2);
            if (listaDatos.size() == 2) { //1 op, ofrecer 1 hab Superior y 1 Junior
                modelo(listaDatos);
                String habit1 = listaDatos.get(0).getNombre();
                String habit2 = listaDatos.get(1).getNombre();
                boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.JuniorSinMascota3(fecha1, fecha2); //2 op, 3 Junior mascota
                if (listaDatos.size() == 3) {
                    modelo(listaDatos);
                    String pla1 = listaDatos.get(0).getPlanta();
                    String pla2 = listaDatos.get(1).getPlanta();
                    String pla3 = listaDatos.get(2).getPlanta();
                    boreservaDetalla.detalle3HabiSintMas(listaDatos, taDatosDetalle, pla1, pla2, pla3, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.EstanSuperSinMascota(fecha1, fecha2); //3 op, ofrecer 1 hab Estandar y 1 superior
                if (listaDatos.size() == 2) {
                    modelo(listaDatos);
                    String habit1 = listaDatos.get(0).getNombre();
                    String habit2 = listaDatos.get(1).getNombre();
                    boreservaDetalla.detalle2HabitSinMas(listaDatos, taDatosDetalle, habit1, habit2, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else if (listaDatos.isEmpty() || listaDatos.size() == 1) {
                listaDatos = boreserva.Estan2Juni1Mascota(fecha1, fecha2); //2 op, 3 Junior mascota
                if (listaDatos.size() == 3) {
                    modelo(listaDatos);
                    String pla1 = listaDatos.get(0).getPlanta();
                    String pla2 = listaDatos.get(1).getPlanta();
                    String pla3 = listaDatos.get(2).getPlanta();
                    boreservaDetalla.detalle3HabiSintMas(listaDatos, taDatosDetalle, pla1, pla2, pla3, fecha1, fecha2);
                }else {
                    JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay habitaciones disponibles con acceso a mascotas.");
            }
        }
    }

    public void modelo(ArrayList<objConsultaReserva> listaDatos) {
        DefaultTableModel model = (DefaultTableModel) tbTablaDatos.getModel();
        model.setRowCount(0);
        Object[] arreglo = new Object[4];
        for (int i = 0; i < listaDatos.size(); i++) {
            arreglo[0] = listaDatos.get(i).getId();
            arreglo[1] = listaDatos.get(i).getPlanta();
            arreglo[2] = listaDatos.get(i).getNombre();
            arreglo[3] = listaDatos.get(i).getMascota();

            model.addRow(arreglo);
        }

    }

//    public String buscarMas(int habMas) {
//        String res = "";
//        habMas = Integer.parseInt(txtReserva.getText());
//        res = boreserva.comprobarMascota(habMas);
//        return res;
//    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cmbmascotas;
    private com.toedter.calendar.JDateChooser dtfechaIngreso;
    private com.toedter.calendar.JDateChooser dtfechaSalida;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JLabel lblcedula;
    private javax.swing.JSpinner spcantidad;
    private javax.swing.JTextArea taDatosDetalle;
    private javax.swing.JTable tbTablaDatos;
    private javax.swing.JTextField txtReserva;
    // End of variables declaration//GEN-END:variables
}
